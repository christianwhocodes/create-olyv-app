# Generated by Django 5.2.5 on 2025-08-29 09:43

import app.school.models
import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicTerm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('term1', 'Term 1'), ('term2', 'Term 2'), ('term3', 'Term 3')], help_text='Select the academic term. Most schools operate on 3 terms per year.', max_length=100, unique=True)),
                ('start_date', models.DateField(help_text='The official start date for this school term (YYYY-MM-DD format).')),
                ('end_date', models.DateField(help_text='The official end date for this school term (YYYY-MM-DD format).')),
                ('year', models.PositiveIntegerField(help_text='Academic year this term belongs to (e.g., 2024 for 2024 academic year).')),
            ],
            options={
                'ordering': ['start_date', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ClassLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('beginner', 'Beginner Class'), ('pp1', 'PP1'), ('pp2', 'PP2'), ('grade1', 'Grade 1'), ('grade2', 'Grade 2')], help_text='Select the class level.', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Optional description of the class curriculum, age requirements etc.')),
                ('class_order', models.PositiveIntegerField(editable=False, help_text='Automatically set order for display and progression tracking.')),
                ('age_criteria', models.PositiveIntegerField(blank=True, help_text='Minimum age requirement in years. Students must meet this age by June 1st of the academic year. Leave blank if no age restriction applies.', null=True)),
                ('admission_fee', models.DecimalField(decimal_places=2, help_text='One-time admission fee charged when a student first enrolls in this class level (in local currency).', max_digits=10)),
                ('assessment_fee', models.DecimalField(decimal_places=2, help_text="One-time assessment fee charged during the student's first term in this class (in local currency).", max_digits=10)),
            ],
            options={
                'ordering': ['class_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Learner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text="Student's first name as it appears on official documents (birth certificate, etc.).", max_length=100)),
                ('last_name', models.CharField(help_text="Student's last name/surname as it appears on official documents.", max_length=100)),
                ('middle_name', models.CharField(blank=True, help_text="Student's middle name (optional). Leave blank if not applicable.", max_length=100)),
                ('date_of_birth', models.DateField(help_text="Student's exact date of birth (YYYY-MM-DD format). This is used to verify age requirements.")),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], help_text="Student's gender for record-keeping and facilities planning.", max_length=10)),
                ('birth_certificate', models.FileField(blank=True, help_text="Upload the student's birth certificate (PDF, JPG, or PNG format, max 5MB). Required for age verification.", null=True, upload_to='learners/birth_certificates/%Y/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png']), app.school.models.validate_file_size])),
                ('admission_date', models.DateField(auto_now_add=True, help_text='Date when the student was officially admitted to the school (automatically recorded).')),
                ('student_id', models.CharField(blank=True, help_text='Unique student identification number (automatically generated if left blank).', max_length=20, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if the student is currently enrolled. Uncheck to mark as withdrawn/transferred.')),
                ('class_level', models.ForeignKey(help_text='The current class level this student is enrolled in.', on_delete=django.db.models.deletion.CASCADE, related_name='students', to='school.classlevel')),
            ],
            options={
                'ordering': ['class_level__class_order', 'last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='LearnerAdditionalInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('referral_source', models.TextField(blank=True, help_text='Please tell us how you learned about our school (friend, website, advertisement, etc.). This helps us improve our outreach.', verbose_name='How did you hear about us?')),
                ('previous_school', models.CharField(blank=True, help_text="Name of previous school or daycare (if applicable). This helps us understand the student's educational background.", max_length=200)),
                ('special_needs', models.TextField(blank=True, help_text='Any learning disabilities, behavioral considerations, or special educational needs we should be aware of.')),
                ('additional_information', models.TextField(blank=True, help_text="Any questions about our programs, concerns, or additional information you'd like to share with us.", verbose_name='Questions or Comments')),
                ('learner', models.OneToOneField(help_text='The student this additional information belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='additional_info', to='school.learner')),
            ],
        ),
        migrations.CreateModel(
            name='LearnerGuardian',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship', models.CharField(choices=[('mother', 'Mother'), ('father', 'Father'), ('guardian', 'Legal Guardian'), ('grandparent', 'Grandparent'), ('other', 'Other Relative')], help_text='Relationship to the student (mother, father, legal guardian, etc.).', max_length=20)),
                ('first_name', models.CharField(help_text="Parent/guardian's first name as it appears on official documents.", max_length=100)),
                ('last_name', models.CharField(help_text="Parent/guardian's last name/surname as it appears on official documents.", max_length=100)),
                ('phone_number', models.CharField(help_text='Primary phone number (must be reachable during school hours for emergencies).', max_length=15)),
                ('email', models.EmailField(blank=True, help_text='Email address for school communications (newsletters, reports, alerts). Optional but recommended.', max_length=254)),
                ('occupation', models.CharField(blank=True, help_text='Current occupation or job title (optional, for school records).', max_length=100)),
                ('workplace', models.CharField(blank=True, help_text='Name of employer or workplace (optional, for emergency contact purposes).', max_length=200)),
                ('national_id_document', models.FileField(help_text='Upload national ID document (both front and back sides - can be combined PDF or separate images, max 5MB). Required for verification.', upload_to='guardians/ids/%Y/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'jpeg', 'png']), app.school.models.validate_file_size])),
                ('is_primary_contact', models.BooleanField(default=False, help_text='Check if this is the primary contact for school communications and emergencies.')),
                ('can_pick_up_student', models.BooleanField(default=True, help_text='Check if this person is authorized to pick up the student from school.')),
                ('learner', models.ForeignKey(help_text='The student this parent/guardian is responsible for.', on_delete=django.db.models.deletion.CASCADE, related_name='guardians', to='school.learner')),
            ],
            options={
                'verbose_name': 'Parent/Guardian',
                'verbose_name_plural': 'Parents/Guardians',
                'ordering': ['learner', 'relationship', 'last_name'],
            },
        ),
        migrations.CreateModel(
            name='LearnerMedicalInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('allergies', models.TextField(blank=True, help_text="List any known allergies (food, medication, environmental). Be specific about severity and reactions. Write 'None' if no known allergies.")),
                ('medications', models.TextField(blank=True, help_text="List any regular medications the student takes, including dosage and timing. Include emergency medications like inhalers. Write 'None' if no medications.")),
                ('medical_conditions', models.TextField(blank=True, help_text='Any ongoing medical conditions, disabilities, or special health needs the school should be aware of (e.g., asthma, diabetes, epilepsy).')),
                ('dietary_restrictions', models.TextField(blank=True, help_text='Any dietary restrictions or special nutritional needs (religious, medical, or personal preferences).')),
                ('medical_facility', models.CharField(blank=True, help_text='Name and location of preferred hospital/clinic for emergencies. Include contact number if possible. (Costs covered by parent/guardian)', max_length=200, verbose_name='Preferred Medical Facility')),
                ('emergency_contact_name', models.CharField(help_text='Name of primary emergency contact (usually parent/guardian).', max_length=100)),
                ('emergency_contact_phone', models.CharField(help_text='Primary emergency contact phone number (must be reachable during school hours).', max_length=15)),
                ('secondary_emergency_contact', models.CharField(blank=True, help_text='Name of secondary emergency contact (optional but recommended).', max_length=100)),
                ('secondary_emergency_phone', models.CharField(blank=True, help_text='Secondary emergency contact phone number (optional).', max_length=15)),
                ('learner', models.OneToOneField(help_text='The student this medical information belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='medical_info', to='school.learner')),
            ],
        ),
        migrations.CreateModel(
            name='MealPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('plan_type', models.CharField(choices=[('daycare', 'Daycare Meal Plan'), ('school', 'School Meal Plan')], help_text='Choose whether this meal plan is for daycare or regular school program.', max_length=20)),
                ('day', models.CharField(choices=[('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday')], help_text='Day of the week this meal schedule applies to.', max_length=20)),
                ('morning_snack', models.CharField(help_text='Morning snack items (around 10:00 AM). List main items and any alternatives.', max_length=200)),
                ('lunch', models.CharField(help_text='Main lunch menu items (around 12:30 PM). Include main dish, sides, and drinks.', max_length=200)),
                ('evening_snack', models.CharField(help_text='Afternoon/evening snack items (around 3:00 PM). List main items and beverages.', max_length=200)),
                ('special_notes', models.TextField(blank=True, help_text='Any special dietary notes, allergen warnings, or preparation instructions for this day.')),
            ],
            options={
                'ordering': ['plan_type', 'day'],
                'unique_together': {('plan_type', 'day')},
            },
        ),
        migrations.CreateModel(
            name='ClassTermFees',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tuition_fee', models.DecimalField(decimal_places=2, help_text='Academic tuition fee for this class during this term (in local currency).', max_digits=10)),
                ('meal_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Meal/lunch fee for this class during this term (in local currency). Set to 0 if meals not provided.', max_digits=10)),
                ('activity_fee', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Extra-curricular activities fee (sports, arts, etc.) for this term (in local currency).', max_digits=10)),
                ('academic_term', models.ForeignKey(help_text='The specific term these fees are valid for.', on_delete=django.db.models.deletion.CASCADE, to='school.academicterm')),
                ('class_level', models.ForeignKey(help_text='The class level these fees apply to.', on_delete=django.db.models.deletion.CASCADE, to='school.classlevel')),
            ],
            options={
                'verbose_name_plural': 'Class Term Fees',
                'ordering': ['academic_term__start_date', 'class_level__class_order'],
                'unique_together': {('class_level', 'academic_term')},
            },
        ),
    ]
